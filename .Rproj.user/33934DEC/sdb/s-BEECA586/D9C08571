{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Quick Start Guide\"\nauthor: \"Wenchuan Guo and Bob Zhong\"\ndate: '`r Sys.Date()`'\noutput:\n  html_document:\n    fig_height: 6\n    fig_width: 7\n    highlight: tango\n    theme: united\n  pdf_document: null\nvignette: |\n  %\\VignetteEngine{knitr::knitr} %\\VignetteIndexEntry{Quick Start Guide} %\\usepackage[UTF-8]{inputenc}\n---\n\nThis guide introduces the basic usage of `tsdf`. For more details, see the documentation for individual functions.\n\n## Installation\n`tsdf` now is only available on GitHub and we will upload the package to CRAN after we run more tests on the functions. Type the following command in R console :\n```{r, eval=FALSE}\n#check if devtools is installed\nif(!\"devtools\" %in% rownames(installed.packages())){\n\tinstall.packages(devtools)\n}\ndevtools::install_github(\"wguo1990/tsdf\")\n```\nThen the R package will be downloaded and installed to the default directories. Run the following command to load the package :\n```{r}\nlibrary(tsdf)\n```\nWe will briefly go over main functions and their basic usage in the following sections.\n\n## Zhong's 2-/3-stage Phase II designs\nTo calculate Zhong's two-/three-stage design, users need to provide : left-side type I error(`alpha1`), right-side type I error(`alpha2`), type II error(`beta`), minimal response rate(`pc`) and unacceptable response rate(`pt`, alternative). The minimal response rate can be either single point or an interval. `stage` option specify 2 or 3 stage design. Run the following command to obtain a 2-stage design\n```{r}\n# type I errors\nalpha1 <- 0.15\nalpha2 <- 0.10\n# type II error\nbeta <- 0.15\n# response rate\npc <- 0.25\n# alternative \npt <- pc + 0.20\n# 2-stage design\nout <- opt.design(alpha1, alpha2, beta, pc, pt, stage=2)\n```\n`out` is an object of class `opt.design`. S3 method `print` is available for  `opt.design` class. To extract information, run \n```{r}\nprint(out)\n```\n\n## Decision table for Phase I dose-finding\n`dec.table` function is used to generate decision table for a three-stage dose-finding design. `alpha.l` (left side), `alpha.r` (right side), `alpha.u` (right side type I error for \"DU\", usually less than `alpha.r`) are three type I errors control the boundary of decisions. `pc` and `pc.u` are both target toxicity level where the latter controls the boundary of decision \"DU\" in the table. `pc` is either a single or an interval value. If `pc` is just a single value, for most cases, users may choose `pc = pc.u`. We call `dec.table` function as follows \n```{r}\n# sample size \nn <- rep(3, 3)\n# type I errors \nalpha.l <- 0.6\nalpha.r <- 0.4\nalpha.u <- 0.2\n# target toxicity \npc <- 0.3\npc.u <- pc\n# call dec.table\nout <- dec.table(alpha.l, alpha.r, alpha.u, pc, pc.u, n)\n```\n`out` is an object of class `dec.table` that contains all the relevant information including decision table, real type errors and input parameter. However, we do not recommend users to extract the components from this object directly. `plot` and `print` S3 method are available for `dec.table` class. \n\nWe can view the decision table using `print` function :\n```{r}\nprint(out)\n```\nor visualize the decision table by executing the `plot` function :\n```{r}\nplot(out)\n```\n\n## Dose-finding simulations\nThere are two functions that allow users to run dose-finding simulations using a user supplied decision table: `dec.sim` and `sl.sim`. To run simulations, users need to provide a decision table either from `dec.table` function or a user-supplied table (see details in next section), true probability of toxicity at each dose level, starting dose (default to lowest dose level) and number of simulated trials (default to 1000). \n\n`dec.sim` runs one scenario simulation which is usually used for an initial test and `sl.sim` runs a list of scenarios from `.csv` or `.txt` files (See next section Data Format for details). Let's see an example :\n```{r}\n# true toxicity\ntruep <- c(0.3, 0.45, 0.5, 0.6)\n# generate a decision table\ndt <- dec.table(0.6,0.4,0.2,0.3,0.3,c(3,3,3))\n# run simulation\nout1 <- dec.sim(truep, dt$table, start.level = 2, nsim = 1000)\n```\nThe following command loads a sample scenarios list in `tsdf` package :\n```{r}\ntest.file <- system.file(\"extdata\", \"testS.csv\", package = \"tsdf\")\n```\nRun simulations using `sl.sim` :\n```{r}\nout2 <- sl.sim(dt$table, test.file)\n```\n`out1` and `out2` are both `dec.sim` class object. `out2` is also a class of `sl.sim` when the scenarios is more than 2. S3 method `summary` and `plot` are availiale for this class. For example, a summary of commonly used statistics is reported if we use the `summary` function :\n```{r}\n# target toxicity \npt <- c(0.3, 0.4)\nsummary(out2, pt)\n```\nThere are four different type of plots for `dec.sim` object where option `s` indicates the number of scenario you want to plot and `pt` is the target toxicity for each scenario, see more details in `plot.dec.sim` R documentation:\n```{r}\n# input information (true toxicity)\nplot(out2, s = 2, pt = c(0.3, 0.4), type=\"s\")\n# probability of selecting as MTD at each dose level\nplot(out2, s = 2, pt = c(0.3, 0.4), type = \"prob\")\n# average number of patients treated at each dose level\nplot(out2, s = 2, pt = c(0.3, 0.4), type = \"np\")\n# number of DLTs experienced at each dose level\nplot(out2, s = 2, pt = c(0.3, 0.4), type=\"dlt\")\n```\n\nThere is a built-in function to put all different plots on same figure, simply run\n```{r fig.height = 8}\nplot(out2, pt = c(0.3, 0.4), type = \"all\", cex = 0.7)\n```\n\n## Scenarios list/customized table format\nThe `.csv` or `.txt` files used for `sl.sim` look like :\n```{r echo=FALSE, results='asis'}\nsl <- system.file(\"extdata\", \"testS.csv\", package = \"tsdf\")\nknitr::kable(read.table(sl, header = TRUE, sep = \",\"))\n```\n\nThis example is saved under `\\inst\\extdata\\testS.csv`, use `system.file` to load it in R. The following variables have to be included: `Start.dose` : the starting dose level; `N.trails` : the number of simulated trials; `Dose*` : true probabilities of toxicity at the dose levels. Note that users don't need put `NA` in the raw data if scenarios don't have equal number of dose levels. In the above example, the `NA` on the first row is blank in the raw `.csv` file. \n\nBoth `dec.sim` and `sl.sim` support user-supplied decision table. It can be either  `matrix`, `data.frame` or `table` in R. There is no checking on the format of the table in `tsdf`, so users need to make sure the input is a legitimate decision table for dose-finding. Also, the column name of the table should be the actual sample size instead of the default output of `read.table` which has column names `X.*` or `V.*`. For example, the following command reads the sample decision table in the package : \n```{r, warning=FALSE}\ntable.file <- system.file(\"extdata\", \"decTable.csv\", package = \"tsdf\")\ndec <- read.table(table.file, sep = \",\", col.names = c(3,4,8,10), row.names = 1, check.names = FALSE)\ncolnames(dec)\n```\n\nAlthough there are many ways to import a decision table from `.csv` or `.txt` files, a typical decision table used for `dev.sim` and `sl.sim` functions have to have the following format when it's loaded in R:  \n```{r, echo=FALSE}\nknitr::kable(dec)\n```\n\n",
    "created" : 1503074473158.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "215496621",
    "id" : "D9C08571",
    "lastKnownWriteTime" : 1503074796,
    "last_content_update" : 1503074796796,
    "path" : "C:/Users/wguo25/Desktop/GitHub/tsdf/vignettes/my-vignette.Rmd",
    "project_path" : "vignettes/my-vignette.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}